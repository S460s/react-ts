{"version":3,"sources":["common/Button.tsx","components/Task.tsx","theme.ts","App.tsx","index.tsx"],"names":["Button","styled","button","isPrimary","theme","colors","primary","light","fontSize","medium","StyledTask","div","lightAccent","dark","isComplete","animations","fadeIn","TaskTitle","p","large","isDone","ButtonWrap","Input","input","Task","title","id","handleDelete","complete","edit","useState","editMode","setEditMode","newTitle","setNewTitle","toggleEdit","prevState","Fragment","value","onChange","e","target","onClick","darkTheme","borderRadius","small","keyframes","darkAccent","ClearBtn","Title","h1","Form","form","TaskConteiner","initialValue","reducer","state","action","type","payload","uniqid","filter","todo","map","task","newName","Error","App","useReducer","tasks","dispatch","taskName","setTaskName","editTask","todoComponents","onSubmit","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0274e527.chunk.js","sourcesContent":["import styled from 'styled-components';\ninterface ButtonProps {\n\tisPrimary?: boolean;\n}\n\nconst Button = styled.button<ButtonProps>`\n\tbackground-color: ${({ isPrimary, theme }) =>\n\t\tisPrimary ? theme.colors.primary : theme.colors.light};\n\tcolor: ${({ isPrimary, theme }) => (isPrimary ? theme.colors.light : theme.colors.primary)};\n\twidth: 100px;\n\toutline: none;\n\tborder: none;\n\tcursor: pointer;\n\tfont-size: ${({ theme }) => theme.fontSize.medium};\n`;\n\nexport default Button;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\n\nexport interface TaskInterface {\n\ttitle: string;\n\tid: string;\n\tisDone: boolean;\n}\n\ninterface TaskProps extends TaskInterface {\n\thandleDelete(id: string): void;\n\tcomplete(id: string): void;\n\tedit(id: string, newName: string): void;\n}\n\ninterface StyledTaskProps {\n\tisComplete: boolean;\n}\n\nconst StyledTask = styled.div<StyledTaskProps>`\n\tborder: 3px solid ${({ theme }) => theme.colors.lightAccent};\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\twidth: 70%;\n\tmax-width: 800px;\n\tmin-width: 400px;\n\tmargin-top: 10px;\n\tcolor: ${({ theme }) => theme.colors.dark};\n\ttext-decoration: ${({ isComplete }) => (isComplete ? 'line-through' : 'none')};\n\tanimation: 2s linear ${({ theme }) => theme.animations.fadeIn};\n\theight: 60px;\n\t&:hover {\n\t\ttransform: scale(1.1);\n\t}\n\ttransition: transform 1s ease;\n`;\n\ninterface TaskTitleProps {\n\tisDone: boolean;\n}\n\nconst TaskTitle = styled.p<TaskTitleProps>`\n\tfont-size: ${({ theme }) => theme.fontSize.large};\n\tcursor: ${({ isDone }) => (isDone ? 'default' : 'pointer')};\n`;\n\nconst ButtonWrap = styled.div`\n\twidth: 30%;\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`;\n\nconst Input = styled.input`\n\tfont-size: ${({ theme }) => theme.fontSize.large};\n\tborder: none;\n\twidth: 50%;\n\tborder-bottom: solid 2px ${({ theme }) => theme.colors.dark};\n\tcolor: ${({ theme }) => theme.colors.dark};\n\toutline: none;\n\tmargin-left: 10px;\n`;\n\nfunction Task({ title, id, isDone, handleDelete, complete, edit }: TaskProps): JSX.Element {\n\tconst [editMode, setEditMode] = useState(false);\n\tconst [newTitle, setNewTitle] = useState(title);\n\n\tconst toggleEdit = (): void => {\n\t\tif (!isDone) {\n\t\t\tsetEditMode((prevState) => !prevState);\n\t\t}\n\t};\n\n\tconst deleteTodo = (): void => {\n\t\thandleDelete(id);\n\t};\n\n\tconst completeTodo = (): void => {\n\t\tcomplete(id);\n\t};\n\n\tconst saveTodo = (): void => {\n\t\tedit(id, newTitle);\n\t\ttoggleEdit();\n\t};\n\n\treturn (\n\t\t<StyledTask isComplete={isDone}>\n\t\t\t{!editMode ? (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<TaskTitle isDone={isDone} onClick={toggleEdit}>\n\t\t\t\t\t\tTask: {title}\n\t\t\t\t\t</TaskTitle>\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button onClick={completeTodo}>{isDone ? 'Undo' : 'Finish'}</Button>\n\t\t\t\t\t\t<Button onClick={deleteTodo}>Delete</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t</React.Fragment>\n\t\t\t) : (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<Input value={newTitle} onChange={(e) => setNewTitle(e.target.value)} />\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button onClick={saveTodo}>Save</Button>\n\t\t\t\t\t\t<Button onClick={toggleEdit}>Cancel</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</StyledTask>\n\t);\n}\n\nexport default Task;\n","import { DefaultTheme, keyframes } from 'styled-components';\n\nconst darkTheme: DefaultTheme = {\n\tborderRadius: '10px',\n\t// material UI dark color pallate\n\n\tfontSize: {\n\t\tsmall: '10px',\n\t\tmedium: '15px',\n\t\tlarge: '20px',\n\t},\n\n\tanimations: {\n\t\tfadeIn: keyframes`\n\t\t\tfrom{\n\t\t\t\topacity: 0%;\n\t\t\t\ttransform: scale(0.2) ;\n\t\t\t}\n\t\t\tto{\n\t\t\t\topacity: 100%;\n\t\t\t\ttransform: scale(1); \n\t\t\t}\n\t\t`,\n\t},\n\n\tcolors: {\n\t\tlightAccent: '#88b0b6',\n\t\tlight: '#f5f6f6',\n\t\tprimary: '#ea8f2d',\n\t\tdarkAccent: '#ae6043',\n\t\tdark: '#324355',\n\t},\n};\n\nexport { darkTheme };\n","import React, { useReducer, useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport Task, { TaskInterface } from './components/Task';\nimport { darkTheme } from './theme';\nimport uniqid from 'uniqid';\nimport Button from './common/Button';\n\nconst ClearBtn = styled(Button)`\n\twidth: 150px;\n\tpadding: 5px;\n\tmargin-top: 10px;\n`;\n\nconst Title = styled.h1`\n\tcolor: ${({ theme }) => theme.colors.primary};\n\ttext-align: center;\n`;\n\nconst Form = styled.form`\n\twidth: 100vw;\n\theight: 30px;\n\tdisplay: flex;\n\tjustify-content: center;\n`;\n\nconst Input = styled.input`\n\twidth: 30%;\n\toutline: none;\n\tborder: ${({ theme }) => theme.colors.primary} 2px solid;\n`;\n\nconst TaskConteiner = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tflex-wrap: nowrap;\n\tjustify-content: center;\n\theight: max-content;\n\twidth: 100vw;\n`;\n\ntype ACTIONTYPE =\n\t| { type: 'add'; payload: TaskInterface }\n\t| { type: 'edit'; payload: { id: string; newName: string } }\n\t| { type: 'delete'; payload: string }\n\t| { type: 'complete'; payload: string }\n\t| { type: 'clear' };\n\nconst initialValue: TaskInterface[] | [] = [];\n\nfunction reducer(state: typeof initialValue, action: ACTIONTYPE) {\n\tswitch (action.type) {\n\t\tcase 'add':\n\t\t\treturn [...state, { title: action.payload.title, isDone: false, id: uniqid() }];\n\n\t\tcase 'delete':\n\t\t\treturn state.filter((todo) => todo.id !== action.payload);\n\n\t\tcase 'complete':\n\t\t\treturn state.map((task: TaskInterface) => {\n\t\t\t\treturn task.id === action.payload ? { ...task, isDone: !task.isDone } : task;\n\t\t\t});\n\n\t\tcase 'edit':\n\t\t\treturn state.map((task: TaskInterface) => {\n\t\t\t\treturn task.id === action.payload.id ? { ...task, title: action.payload.newName } : task;\n\t\t\t});\n\t\tcase 'clear':\n\t\t\treturn state.filter((task: TaskInterface) => {\n\t\t\t\treturn !task.isDone;\n\t\t\t});\n\t\tdefault:\n\t\t\tthrow new Error();\n\t}\n}\n\nconst App = () => {\n\tconst [tasks, dispatch] = useReducer(reducer, initialValue);\n\tconst [taskName, setTaskName] = useState<string>('');\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n\t\te.preventDefault();\n\t\tsetTaskName(e.target.value);\n\t};\n\n\tconst handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault();\n\t\tconst task: TaskInterface = {\n\t\t\ttitle: taskName,\n\t\t\tisDone: false,\n\t\t\tid: uniqid(),\n\t\t};\n\t\tdispatch({ type: 'add', payload: task });\n\t\tsetTaskName('');\n\t};\n\n\tconst handleDelete = (id: string): void => {\n\t\tdispatch({ type: 'delete', payload: id });\n\t};\n\n\tconst complete = (id: string): void => {\n\t\tdispatch({ type: 'complete', payload: id });\n\t};\n\n\tconst editTask = (id: string, newName: string): void => {\n\t\tdispatch({ type: 'edit', payload: { id, newName } });\n\t};\n\n\tconst clearCompletedTasks = (): void => {\n\t\tdispatch({ type: 'clear' });\n\t};\n\n\tconst todoComponents = tasks.map((task: TaskInterface) => {\n\t\treturn (\n\t\t\t<Task\n\t\t\t\tkey={task.id}\n\t\t\t\ttitle={task.title}\n\t\t\t\tid={task.id}\n\t\t\t\tisDone={task.isDone}\n\t\t\t\thandleDelete={handleDelete}\n\t\t\t\tcomplete={complete}\n\t\t\t\tedit={editTask}\n\t\t\t/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t<Title>Task App</Title>\n\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t<Input type='text' value={taskName} onChange={handleChange} />\n\t\t\t\t<Button isPrimary>Add</Button>\n\t\t\t</Form>\n\t\t\t<TaskConteiner>\n\t\t\t\t<ClearBtn onClick={clearCompletedTasks} isPrimary>\n\t\t\t\t\tDelete Completed Tasks\n\t\t\t\t</ClearBtn>\n\t\t\t\t{todoComponents}\n\t\t\t</TaskConteiner>\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}