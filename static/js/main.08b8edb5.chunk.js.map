{"version":3,"sources":["common/StyledTask.tsx","components/Task.tsx","theme.ts","App.tsx","helper/localStorageLogic.ts","index.tsx"],"names":["Button","styled","button","isPrimary","theme","colors","primary","light","fontSize","medium","Title","h1","Form","form","Input","input","StyledTask","div","lightAccent","dark","isComplete","animations","fadeIn","TaskTitle","p","large","isDone","ButtonWrap","Task","title","id","handleDelete","complete","edit","useState","editMode","setEditMode","newTitle","setNewTitle","toggleEdit","prevState","Fragment","value","onChange","e","target","onClick","darkTheme","borderRadius","small","keyframes","darkAccent","key","defaultValue","ClearBtn","TaskConteiner","initialValue","localStorage","getItem","data","JSON","parse","getData","reducer","state","action","type","payload","uniqid","filter","todo","map","task","newName","Error","setItem","stringify","populateStorage","App","useReducer","tasks","dispatch","taskName","setTaskName","editTask","todoComponents","onSubmit","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08b8edb5.chunk.js","sourcesContent":["import styled from 'styled-components';\ninterface ButtonProps {\n\tisPrimary?: boolean;\n}\n\nconst Button = styled.button<ButtonProps>`\n\tbackground-color: ${({ isPrimary, theme }) =>\n\t\tisPrimary ? theme.colors.primary : theme.colors.light};\n\tcolor: ${({ isPrimary, theme }) => (isPrimary ? theme.colors.light : theme.colors.primary)};\n\twidth: 100px;\n\toutline: none;\n\tborder: none;\n\tcursor: pointer;\n\tfont-size: ${({ theme }) => theme.fontSize.medium};\n`;\n\nexport const Title = styled.h1`\n\tcolor: ${({ theme }) => theme.colors.primary};\n\ttext-align: center;\n`;\n\nexport const Form = styled.form`\n\twidth: 100vw;\n\theight: 30px;\n\tdisplay: flex;\n\tjustify-content: center;\n`;\n\nexport const Input = styled.input`\n\twidth: 30%;\n\toutline: none;\n\tborder: ${({ theme }) => theme.colors.primary} 2px solid;\n`;\n\nexport default Button;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/StyledTask';\n\nexport interface TaskInterface {\n\ttitle: string;\n\tid: string;\n\tisDone: boolean;\n}\n\ninterface TaskProps extends TaskInterface {\n\thandleDelete(id: string): void;\n\tcomplete(id: string): void;\n\tedit(id: string, newName: string): void;\n}\n\ninterface StyledTaskProps {\n\tisComplete: boolean;\n}\n\nconst StyledTask = styled.div<StyledTaskProps>`\n\tborder: 3px solid ${({ theme }) => theme.colors.lightAccent};\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\twidth: 70%;\n\tmax-width: 800px;\n\tmin-width: 400px;\n\tmargin-top: 10px;\n\tcolor: ${({ theme }) => theme.colors.dark};\n\ttext-decoration: ${({ isComplete }) => (isComplete ? 'line-through' : 'none')};\n\tanimation: 2s linear ${({ theme }) => theme.animations.fadeIn};\n\theight: 60px;\n\t&:hover {\n\t\ttransform: scale(1.1);\n\t}\n\ttransition: transform 1s ease;\n`;\n\ninterface TaskTitleProps {\n\tisDone: boolean;\n}\n\nconst TaskTitle = styled.p<TaskTitleProps>`\n\tfont-size: ${({ theme }) => theme.fontSize.large};\n\tcursor: ${({ isDone }) => (isDone ? 'default' : 'pointer')};\n`;\n\nconst ButtonWrap = styled.div`\n\twidth: 30%;\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`;\n\nconst Input = styled.input`\n\tfont-size: ${({ theme }) => theme.fontSize.large};\n\tborder: none;\n\twidth: 50%;\n\tborder-bottom: solid 2px ${({ theme }) => theme.colors.dark};\n\tcolor: ${({ theme }) => theme.colors.dark};\n\toutline: none;\n\tmargin-left: 10px;\n`;\n\nfunction Task({ title, id, isDone, handleDelete, complete, edit }: TaskProps): JSX.Element {\n\tconst [editMode, setEditMode] = useState(false);\n\tconst [newTitle, setNewTitle] = useState(title);\n\n\tconst toggleEdit = (): void => {\n\t\tif (!isDone) {\n\t\t\tsetEditMode((prevState) => !prevState);\n\t\t}\n\t};\n\n\tconst deleteTodo = (): void => {\n\t\thandleDelete(id);\n\t};\n\n\tconst completeTodo = (): void => {\n\t\tcomplete(id);\n\t};\n\n\tconst saveTodo = (): void => {\n\t\tedit(id, newTitle);\n\t\ttoggleEdit();\n\t};\n\n\treturn (\n\t\t<StyledTask isComplete={isDone}>\n\t\t\t{!editMode ? (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<TaskTitle isDone={isDone} onClick={toggleEdit}>\n\t\t\t\t\t\tTask: {title}\n\t\t\t\t\t</TaskTitle>\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button onClick={completeTodo}>{isDone ? 'Undo' : 'Finish'}</Button>\n\t\t\t\t\t\t<Button onClick={deleteTodo}>Delete</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t</React.Fragment>\n\t\t\t) : (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<Input value={newTitle} onChange={(e) => setNewTitle(e.target.value)} />\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button onClick={saveTodo}>Save</Button>\n\t\t\t\t\t\t<Button onClick={toggleEdit}>Cancel</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</StyledTask>\n\t);\n}\n\nexport default Task;\n","import { DefaultTheme, keyframes } from 'styled-components';\n\nconst darkTheme: DefaultTheme = {\n\tborderRadius: '10px',\n\t// material UI dark color pallate\n\n\tfontSize: {\n\t\tsmall: '10px',\n\t\tmedium: '15px',\n\t\tlarge: '20px',\n\t},\n\n\tanimations: {\n\t\tfadeIn: keyframes`\n\t\t\tfrom{\n\t\t\t\topacity: 0%;\n\t\t\t\ttransform: scale(0.2) ;\n\t\t\t}\n\t\t\tto{\n\t\t\t\topacity: 100%;\n\t\t\t\ttransform: scale(1); \n\t\t\t}\n\t\t`,\n\t},\n\n\tcolors: {\n\t\tlightAccent: '#88b0b6',\n\t\tlight: '#f5f6f6',\n\t\tprimary: '#ea8f2d',\n\t\tdarkAccent: '#ae6043',\n\t\tdark: '#324355',\n\t},\n};\n\nexport { darkTheme };\n","import React, { useReducer, useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport Task, { TaskInterface } from './components/Task';\nimport { darkTheme } from './theme';\nimport uniqid from 'uniqid';\nimport Button, { Input, Form, Title } from './common/StyledTask';\nimport { checkStorage, populateStorage } from './helper/localStorageLogic';\nconst ClearBtn = styled(Button)`\n\twidth: 150px;\n\tpadding: 5px;\n\tmargin-top: 10px;\n`;\n\nconst TaskConteiner = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tflex-wrap: nowrap;\n\tjustify-content: center;\n\theight: max-content;\n\twidth: 100vw;\n`;\n\ntype ACTIONTYPE =\n\t| { type: 'add'; payload: TaskInterface }\n\t| { type: 'edit'; payload: { id: string; newName: string } }\n\t| { type: 'delete'; payload: string }\n\t| { type: 'complete'; payload: string }\n\t| { type: 'clear' };\n\nconst initialValue: TaskInterface[] | [] = checkStorage<any[]>('tasks', []);\n\nfunction reducer(state: typeof initialValue, action: ACTIONTYPE) {\n\tlet value: TaskInterface[] | null = null;\n\tswitch (action.type) {\n\t\tcase 'add':\n\t\t\tvalue = [...state, { title: action.payload.title, isDone: false, id: uniqid() }];\n\t\t\tbreak;\n\n\t\tcase 'delete':\n\t\t\tvalue = state.filter((todo) => todo.id !== action.payload);\n\t\t\tbreak;\n\n\t\tcase 'complete':\n\t\t\tvalue = state.map((task: TaskInterface) => {\n\t\t\t\treturn task.id === action.payload ? { ...task, isDone: !task.isDone } : task;\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'edit':\n\t\t\tvalue = state.map((task: TaskInterface) => {\n\t\t\t\treturn task.id === action.payload.id ? { ...task, title: action.payload.newName } : task;\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'clear':\n\t\t\tvalue = state.filter((task: TaskInterface) => {\n\t\t\t\treturn !task.isDone;\n\t\t\t});\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error();\n\t}\n\tpopulateStorage<TaskInterface[]>(value, 'tasks');\n\treturn value;\n}\n\nconst App = () => {\n\tconst [tasks, dispatch] = useReducer(reducer, initialValue);\n\tconst [taskName, setTaskName] = useState<string>('');\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n\t\te.preventDefault();\n\t\tsetTaskName(e.target.value);\n\t};\n\n\tconst handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault();\n\t\tconst task: TaskInterface = {\n\t\t\ttitle: taskName,\n\t\t\tisDone: false,\n\t\t\tid: uniqid(),\n\t\t};\n\t\tdispatch({ type: 'add', payload: task });\n\t\tsetTaskName('');\n\t};\n\n\tconst handleDelete = (id: string): void => {\n\t\tdispatch({ type: 'delete', payload: id });\n\t};\n\n\tconst complete = (id: string): void => {\n\t\tdispatch({ type: 'complete', payload: id });\n\t};\n\n\tconst editTask = (id: string, newName: string): void => {\n\t\tdispatch({ type: 'edit', payload: { id, newName } });\n\t};\n\n\tconst clearCompletedTasks = (): void => {\n\t\tdispatch({ type: 'clear' });\n\t};\n\n\tconst todoComponents = tasks.map((task: TaskInterface) => {\n\t\treturn (\n\t\t\t<Task\n\t\t\t\tkey={task.id}\n\t\t\t\ttitle={task.title}\n\t\t\t\tid={task.id}\n\t\t\t\tisDone={task.isDone}\n\t\t\t\thandleDelete={handleDelete}\n\t\t\t\tcomplete={complete}\n\t\t\t\tedit={editTask}\n\t\t\t/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t<Title>Task App</Title>\n\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t<Input type='text' value={taskName} onChange={handleChange} />\n\t\t\t\t<Button isPrimary>Add</Button>\n\t\t\t</Form>\n\t\t\t<TaskConteiner>\n\t\t\t\t<ClearBtn onClick={clearCompletedTasks} isPrimary>\n\t\t\t\t\tDelete Completed Tasks\n\t\t\t\t</ClearBtn>\n\t\t\t\t{todoComponents}\n\t\t\t</TaskConteiner>\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default App;\n","function getData(key: string) {\n\tconst data: string | null = localStorage.getItem(key);\n\tconst objects = JSON.parse(data!);\n\treturn objects;\n}\n\nfunction populateStorage<Type>(data: Type, key: string) {\n\tlocalStorage.setItem(key, JSON.stringify(data));\n}\n\nfunction checkStorage<Type>(key: string, defaultValue: Type) {\n\tif (!localStorage.getItem(key)) {\n\t\treturn defaultValue;\n\t} else {\n\t\treturn getData(key);\n\t}\n}\n\nexport { populateStorage, checkStorage };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}