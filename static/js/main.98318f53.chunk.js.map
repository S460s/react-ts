{"version":3,"sources":["theme.ts","common/StyledTask.tsx","components/Task.tsx","components/TaskForm.tsx","helper/localStorageLogic.ts","components/ProgressBar.tsx","App.tsx","index.tsx"],"names":["darkTheme","borderRadius","fontSize","small","medium","large","animations","fadeIn","keyframes","colors","lightAccent","light","primary","darkAccent","dark","Button","styled","button","isPrimary","theme","Title","h1","Form","form","Input","input","StyledTask","div","isComplete","TaskTitle","p","isDone","ButtonWrap","Task","title","id","handleDelete","complete","edit","useState","editMode","setEditMode","newTitle","setNewTitle","toggleEdit","prevState","Fragment","value","onChange","e","target","onClick","TaskForm","key","defaultValue","addTask","taskName","setTaskName","onSubmit","preventDefault","task","uniqid","type","StyledBar","width","BarWrap","CompleteNum","span","ProgressBar","tasks","completed","total","length","forEach","percent","Math","floor","ClearBtn","TaskConteiner","initialValue","localStorage","getItem","data","JSON","parse","getData","reducer","state","action","payload","filter","todo","map","newName","Error","setItem","stringify","populateStorage","App","useReducer","dispatch","editTask","todoComponents","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98318f53.chunk.js","sourcesContent":["import { DefaultTheme, keyframes } from 'styled-components';\n\nconst darkTheme: DefaultTheme = {\n\tborderRadius: '10px',\n\t// material UI dark color pallate\n\n\tfontSize: {\n\t\tsmall: '10px',\n\t\tmedium: '15px',\n\t\tlarge: '20px',\n\t},\n\n\tanimations: {\n\t\tfadeIn: keyframes`\n\t\t\tfrom{\n\t\t\t\topacity: 0%;\n\t\t\t\ttransform: scale(0.2) ;\n\t\t\t}\n\t\t\tto{\n\t\t\t\topacity: 100%;\n\t\t\t\ttransform: scale(1); \n\t\t\t}\n\t\t`,\n\t},\n\n\tcolors: {\n\t\tlightAccent: '#88b0b6',\n\t\tlight: '#f5f6f6',\n\t\tprimary: '#ea8f2d',\n\t\tdarkAccent: '#ae6043',\n\t\tdark: '#324355',\n\t},\n};\n\nexport { darkTheme };\n","import styled from 'styled-components';\ninterface ButtonProps {\n\tisPrimary?: boolean;\n}\n\nconst Button = styled.button<ButtonProps>`\n\tbackground-color: ${({ isPrimary, theme }) =>\n\t\tisPrimary ? theme.colors.primary : theme.colors.light};\n\tcolor: ${({ isPrimary, theme }) => (isPrimary ? theme.colors.light : theme.colors.primary)};\n\twidth: 100px;\n\toutline: none;\n\tborder: none;\n\tcursor: pointer;\n\tfont-size: ${({ theme }) => theme.fontSize.medium};\n`;\n\nexport const Title = styled.h1`\n\tcolor: ${({ theme }) => theme.colors.primary};\n\ttext-align: center;\n`;\n\nexport const Form = styled.form`\n\twidth: 100vw;\n\theight: 30px;\n\tdisplay: flex;\n\tjustify-content: center;\n`;\n\nexport const Input = styled.input`\n\twidth: 30%;\n\toutline: none;\n\tborder: ${({ theme }) => theme.colors.primary} 2px solid;\n`;\n\nexport default Button;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/StyledTask';\nimport { TaskInterface } from '../common/interfaces';\ninterface TaskProps extends TaskInterface {\n\thandleDelete(id: string): void;\n\tcomplete(id: string): void;\n\tedit(id: string, newName: string): void;\n}\n\ninterface StyledTaskProps {\n\tisComplete: boolean;\n}\n\nconst StyledTask = styled.div<StyledTaskProps>`\n\tborder: 3px solid ${({ theme }) => theme.colors.lightAccent};\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\twidth: 70%;\n\tmax-width: 800px;\n\tmin-width: 400px;\n\tmargin-top: 10px;\n\tcolor: ${({ theme }) => theme.colors.dark};\n\ttext-decoration: ${({ isComplete }) => (isComplete ? 'line-through' : 'none')};\n\tanimation: 2s linear ${({ theme }) => theme.animations.fadeIn};\n\theight: 60px;\n`;\n\ninterface TaskTitleProps {\n\tisDone: boolean;\n}\n\nconst TaskTitle = styled.p<TaskTitleProps>`\n\tfont-size: ${({ theme }) => theme.fontSize.large};\n\tcursor: ${({ isDone }) => (isDone ? 'default' : 'pointer')};\n`;\n\nconst ButtonWrap = styled.div`\n\twidth: 30%;\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`;\n\nconst Input = styled.input`\n\tfont-size: ${({ theme }) => theme.fontSize.large};\n\tborder: none;\n\twidth: 50%;\n\tborder-bottom: solid 2px ${({ theme }) => theme.colors.dark};\n\tcolor: ${({ theme }) => theme.colors.dark};\n\toutline: none;\n\tmargin-left: 10px;\n`;\n\nfunction Task({ title, id, isDone, handleDelete, complete, edit }: TaskProps): JSX.Element {\n\tconst [editMode, setEditMode] = useState(false);\n\tconst [newTitle, setNewTitle] = useState(title);\n\n\tconst toggleEdit = (): void => {\n\t\tif (!isDone) {\n\t\t\tsetEditMode((prevState) => !prevState);\n\t\t}\n\t};\n\n\tconst deleteTodo = (): void => {\n\t\thandleDelete(id);\n\t};\n\n\tconst completeTodo = (): void => {\n\t\tcomplete(id);\n\t};\n\n\tconst saveTodo = (): void => {\n\t\tedit(id, newTitle);\n\t\ttoggleEdit();\n\t};\n\n\treturn (\n\t\t<StyledTask isComplete={isDone}>\n\t\t\t{!editMode ? (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<TaskTitle isDone={isDone} onClick={toggleEdit}>\n\t\t\t\t\t\tTask: {title}\n\t\t\t\t\t</TaskTitle>\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button onClick={completeTodo}>{isDone ? 'Undo' : 'Finish'}</Button>\n\t\t\t\t\t\t<Button onClick={deleteTodo}>Delete</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t</React.Fragment>\n\t\t\t) : (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<Input value={newTitle} onChange={(e) => setNewTitle(e.target.value)} />\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button onClick={saveTodo}>Save</Button>\n\t\t\t\t\t\t<Button onClick={toggleEdit}>Cancel</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</StyledTask>\n\t);\n}\n\nexport default Task;\n","import { useState } from 'react';\nimport Button, { Input, Form } from '../common/StyledTask';\nimport uniqid from 'uniqid';\nimport { TaskInterface } from '../common/interfaces';\n\ninterface TaskFormProps {\n\taddTask(task: TaskInterface): void;\n}\n\nfunction TaskForm({ addTask }: TaskFormProps) {\n\tconst [taskName, setTaskName] = useState<string>('');\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n\t\te.preventDefault();\n\t\tsetTaskName(e.target.value);\n\t};\n\n\tconst handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault();\n\t\tconst task: TaskInterface = {\n\t\t\ttitle: taskName,\n\t\t\tisDone: false,\n\t\t\tid: uniqid(),\n\t\t};\n\t\taddTask(task);\n\t\tsetTaskName('');\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t<Input type='text' value={taskName} onChange={handleChange} />\n\t\t\t\t<Button isPrimary>Add</Button>\n\t\t\t</Form>\n\t\t</div>\n\t);\n}\n\nexport default TaskForm;\n","function getData(key: string) {\n\tconst data: string | null = localStorage.getItem(key);\n\tconst objects = JSON.parse(data!);\n\treturn objects;\n}\n\nfunction populateStorage<Type>(data: Type, key: string) {\n\tlocalStorage.setItem(key, JSON.stringify(data));\n}\n\nfunction checkStorage<Type>(key: string, defaultValue: Type) {\n\tif (!localStorage.getItem(key)) {\n\t\treturn defaultValue;\n\t} else {\n\t\treturn getData(key);\n\t}\n}\n\nexport { populateStorage, checkStorage };\n","import styled from 'styled-components';\nimport { TaskInterface } from '../common/interfaces';\n\ninterface StyledBarProps {\n\twidth: number;\n}\n\nconst StyledBar = styled.div<StyledBarProps>`\n\twidth: ${({ width }) => width}%;\n\theight: 100%;\n\tbackground-color: ${({ theme }) => theme.colors.primary};\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\talign-items: center;\n\tposition: absolute;\n\ttransition: width 1s ease;\n`;\n\nconst BarWrap = styled.div`\n\twidth: 80%;\n\tmax-width: 900px;\n\theight: 30px;\n\tdisplay: block;\n\tmargin: auto;\n\tmargin-top: 30px;\n\tmargin-bottom: 30px;\n\tborder: 2px solid ${({ theme }) => theme.colors.dark};\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n\nconst CompleteNum = styled.span`\n\tcolor: ${({ theme }) => theme.colors.light};\n\tposition: absolute;\n\tz-index: 2;\n`;\n\ninterface ProgressBarProps {\n\ttasks: TaskInterface[];\n}\n\nconst ProgressBar = ({ tasks }: ProgressBarProps) => {\n\tlet completed = 0;\n\tlet total = tasks.length;\n\ttasks.forEach((task) => {\n\t\tif (task.isDone) {\n\t\t\tcompleted += 1;\n\t\t}\n\t});\n\tlet percent = total ? (completed / total) * 100 : 100;\n\n\treturn (\n\t\t<BarWrap>\n\t\t\t<CompleteNum>{Math.floor(percent)}%</CompleteNum>\n\t\t\t<StyledBar width={percent}></StyledBar>\n\t\t</BarWrap>\n\t);\n};\n\nexport default ProgressBar;\n","import React, { useReducer } from 'react';\nimport uniqid from 'uniqid';\n\nimport styled, { ThemeProvider } from 'styled-components';\nimport { darkTheme } from './theme';\nimport Button, { Title } from './common/StyledTask';\n\nimport Task from './components/Task';\nimport { checkStorage, populateStorage } from './helper/localStorageLogic';\nimport { TaskInterface } from './common/interfaces';\n\nimport TaskForm from './components/TaskForm';\nimport ProgressBar from './components/ProgressBar';\n\nconst ClearBtn = styled(Button)`\n\twidth: 150px;\n\tpadding: 5px;\n\tmargin-top: 10px;\n`;\n\nconst TaskConteiner = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tflex-wrap: nowrap;\n\tjustify-content: center;\n\theight: max-content;\n\twidth: 100vw;\n`;\n\ntype ACTIONTYPE =\n\t| { type: 'add'; payload: TaskInterface }\n\t| { type: 'edit'; payload: { id: string; newName: string } }\n\t| { type: 'delete'; payload: string }\n\t| { type: 'complete'; payload: string }\n\t| { type: 'clear' };\n\nconst initialValue: TaskInterface[] | [] = checkStorage<any[]>('tasks', []);\n\nfunction reducer(state: typeof initialValue, action: ACTIONTYPE) {\n\tlet value: TaskInterface[] | null = null;\n\tswitch (action.type) {\n\t\tcase 'add':\n\t\t\tvalue = [...state, { title: action.payload.title, isDone: false, id: uniqid() }];\n\t\t\tbreak;\n\n\t\tcase 'delete':\n\t\t\tvalue = state.filter((todo) => todo.id !== action.payload);\n\t\t\tbreak;\n\n\t\tcase 'complete':\n\t\t\tvalue = state.map((task: TaskInterface) => {\n\t\t\t\treturn task.id === action.payload ? { ...task, isDone: !task.isDone } : task;\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'edit':\n\t\t\tvalue = state.map((task: TaskInterface) => {\n\t\t\t\treturn task.id === action.payload.id ? { ...task, title: action.payload.newName } : task;\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'clear':\n\t\t\tvalue = state.filter((task: TaskInterface) => {\n\t\t\t\treturn !task.isDone;\n\t\t\t});\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error();\n\t}\n\tpopulateStorage<TaskInterface[]>(value, 'tasks');\n\treturn value;\n}\n\nconst App = () => {\n\tconst [tasks, dispatch] = useReducer(reducer, initialValue);\n\n\tconst handleAddTask = (task: TaskInterface) => {\n\t\tdispatch({ type: 'add', payload: task });\n\t};\n\n\tconst handleDelete = (id: string): void => {\n\t\tdispatch({ type: 'delete', payload: id });\n\t};\n\n\tconst complete = (id: string): void => {\n\t\tdispatch({ type: 'complete', payload: id });\n\t};\n\n\tconst editTask = (id: string, newName: string): void => {\n\t\tdispatch({ type: 'edit', payload: { id, newName } });\n\t};\n\n\tconst clearCompletedTasks = (): void => {\n\t\tdispatch({ type: 'clear' });\n\t};\n\n\tconst todoComponents = tasks.map((task: TaskInterface) => {\n\t\treturn (\n\t\t\t<Task\n\t\t\t\tkey={task.id}\n\t\t\t\ttitle={task.title}\n\t\t\t\tid={task.id}\n\t\t\t\tisDone={task.isDone}\n\t\t\t\thandleDelete={handleDelete}\n\t\t\t\tcomplete={complete}\n\t\t\t\tedit={editTask}\n\t\t\t/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t<Title>Task App</Title>\n\t\t\t<TaskForm addTask={handleAddTask} />\n\t\t\t<ProgressBar tasks={tasks} />\n\t\t\t<TaskConteiner>\n\t\t\t\t<ClearBtn onClick={clearCompletedTasks} isPrimary>\n\t\t\t\t\tDelete Completed Tasks\n\t\t\t\t</ClearBtn>\n\t\t\t\t{todoComponents}\n\t\t\t</TaskConteiner>\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}