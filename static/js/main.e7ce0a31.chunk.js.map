{"version":3,"sources":["theme.ts","common/StyledTask.tsx","components/Task.tsx","components/TaskForm.tsx","helper/localStorageLogic.ts","components/ProgressBar.tsx","App.tsx","index.tsx"],"names":["darkTheme","borderRadius","fontSize","small","medium","large","animations","fadeIn","keyframes","colors","lightAccent","light","primary","darkAccent","dark","Button","styled","button","isPrimary","theme","Form","form","Title","h1","Input","input","StyledTask","div","isComplete","TaskTitle","p","isDone","ButtonWrap","Task","title","id","handleDelete","complete","edit","useState","editMode","setEditMode","newTitle","setNewTitle","toggleEdit","prevState","Fragment","value","onChange","e","target","onClick","FormButton","StyledTaskForm","props","isOpen","ButtonWrapper","TaskForm","key","defaultValue","addTask","taskName","setTaskName","setIsOpen","onSubmit","preventDefault","task","uniqid","required","type","placeholder","StyledBar","width","BarWrap","CompleteNum","span","ProgressBar","tasks","completed","total","length","forEach","percent","Math","floor","BigBtn","TaskConteiner","initialValue","localStorage","getItem","data","JSON","parse","getData","reducer","state","action","payload","filter","todo","map","newName","Error","setItem","stringify","populateStorage","App","useReducer","dispatch","editTask","todoComponents","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAEMA,EAA0B,CAC/BC,aAAc,OAGdC,SAAU,CACTC,MAAO,OACPC,OAAQ,OACRC,MAAO,QAGRC,WAAY,CACXC,OAAQC,YAAF,yLAYPC,OAAQ,CACPC,YAAa,UACbC,MAAO,UACPC,QAAS,UACTC,WAAY,UACZC,KAAM,YCzBFC,EAASC,IAAOC,OAAV,kKACS,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,MAAd,OACnBD,EAAYC,EAAMV,OAAOG,QAAUO,EAAMV,OAAOE,SACxC,gBAAGO,EAAH,EAAGA,UAAWC,EAAd,EAAcA,MAAd,OACRD,EAAYC,EAAMV,OAAOE,MAAQQ,EAAMV,OAAOG,WAMlC,qBAAGO,MAAkBjB,SAASE,UAG/BgB,EAAOJ,IAAOK,KAAV,0FAMJC,EAAQN,IAAOO,GAAV,kEACR,qBAAGJ,MAAkBV,OAAOG,WAIzBY,EAAQR,IAAOS,MAAV,iIAKP,qBAAGN,MAAkBV,OAAOG,WAGxBG,I,OCtBTW,EAAaV,IAAOW,IAAV,uSACK,qBAAGR,MAAkBV,OAAOC,eAQvC,qBAAGS,MAAkBV,OAAOK,QAClB,qBAAGc,WACR,eAAiB,UACR,qBAAGT,MAAkBb,WAAWC,UAQlDsB,EAAYb,IAAOc,EAAV,+DACD,qBAAGX,MAAkBjB,SAASG,SACjC,qBAAG0B,OAAuB,UAAY,aAG3CC,EAAahB,IAAOW,IAAV,iHAOVH,EAAQR,IAAOS,MAAV,uKACG,qBAAGN,MAAkBjB,SAASG,SAGhB,qBAAGc,MAAkBV,OAAOK,QAC9C,qBAAGK,MAAkBV,OAAOK,QA+DvBmB,I,MAAAA,EA1Df,YAO4B,IAN3BC,EAM0B,EAN1BA,MACAC,EAK0B,EAL1BA,GACAJ,EAI0B,EAJ1BA,OACAK,EAG0B,EAH1BA,aACAC,EAE0B,EAF1BA,SACAC,EAC0B,EAD1BA,KAC0B,EACMC,oBAAS,GADf,mBACnBC,EADmB,KACTC,EADS,OAEMF,mBAASL,GAFf,mBAEnBQ,EAFmB,KAETC,EAFS,KAIpBC,EAAa,WACbb,GACJU,GAAY,SAACI,GAAD,OAAgBA,MAiB9B,OACC,cAAC,EAAD,CAAYjB,WAAYG,EAAxB,SACGS,EAWD,eAAC,IAAMM,SAAP,WACC,cAAC,EAAD,CACCC,MAAOL,EACPM,SAAU,SAACC,GAAD,OAAON,EAAYM,EAAEC,OAAOH,UAEvC,eAACf,EAAD,WACC,cAAC,EAAD,CAAQmB,QAxBI,WAChBb,EAAKH,EAAIO,GACTE,KAsBI,kBACA,cAAC,EAAD,CAAQO,QAASP,EAAjB,0BAjBF,eAAC,IAAME,SAAP,WACC,eAACjB,EAAD,CAAWE,OAAQA,EAAQoB,QAASP,EAApC,mBACQV,KAER,eAACF,EAAD,WACC,cAAC,EAAD,CAAQmB,QAjBQ,WACpBd,EAASF,IAgBL,SAAgCJ,EAAS,OAAS,WAClD,cAAC,EAAD,CAAQoB,QAtBM,WAClBf,EAAaD,IAqBT,6BCtFN,IAAMiB,EAAapC,YAAOD,EAAPC,CAAH,uHAQVqC,EAAiBrC,YAAOI,EAAPJ,CAAH,iVACR,SAACsC,GAAD,OAAYA,EAAMC,OAAS,OAAS,UAQ3B,qBAAGpC,MAAkBV,OAAOE,SAE5B,qBAAGQ,MAAkBV,OAAOK,QAM3C0C,EAAgBxC,IAAOW,IAAV,sIA+DJ8B,I,UCxFaC,EAAaC,EDwF1BF,EAnDf,YAA+C,IAA3BG,EAA0B,EAA1BA,QAA0B,EACbrB,mBAAiB,IADJ,mBACtCsB,EADsC,KAC5BC,EAD4B,OAEjBvB,oBAAkB,GAFD,mBAEtCgB,EAFsC,KAE9BQ,EAF8B,KAqB7C,OACC,gCACC,eAACV,EAAD,CAAgBE,OAAQA,EAAQS,SAdb,SAACf,GACrBA,EAAEgB,iBACFF,GAAU,GACV,IAAMG,EAAsB,CAC3BhC,MAAO2B,EACP9B,QAAQ,EACRI,GAAIgC,OAELP,EAAQM,GACRJ,EAAY,KAKX,UACC,2CACA,cAACtC,EAAD,CACC4C,UAAU,EACVC,KAAK,OACLtB,MAAOc,EACPb,SAzBiB,SAACC,GACrBA,EAAEgB,iBACFH,EAAYb,EAAEC,OAAOH,QAwBlBuB,YAAY,cAEb,eAACd,EAAD,WACC,cAAC,EAAD,CAAQa,KAAK,SAASnD,WAAS,EAA/B,iBAGA,cAAC,EAAD,CAAQmD,KAAK,SAASnD,WAAS,EAACiC,QAAS,kBAAMY,GAAU,IAAzD,0BAKF,cAACX,EAAD,CACCiB,KAAK,SACLlB,QAAS,kBAAMY,GAAU,SAAClB,GAAD,OAAgBA,MACzC3B,WAAS,EAHV,0BEjFGqD,EAAYvD,IAAOW,IAAV,oNACL,qBAAG6C,SAEQ,qBAAGrD,MAAkBV,OAAOG,WAQ3C6D,EAAUzD,IAAOW,IAAV,yRAQQ,qBAAGR,MAAkBV,OAAOK,QAO3C4D,EAAc1D,IAAO2D,KAAV,iFACP,qBAAGxD,MAAkBV,OAAOE,SA2BvBiE,EAlBK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAClBC,EAAY,EACZC,EAAQF,EAAMG,OAClBH,EAAMI,SAAQ,SAACf,GACVA,EAAKnC,SACR+C,GAAa,MAGf,IAAII,EAAUH,EAASD,EAAYC,EAAS,IAAM,IAElD,OACC,eAACN,EAAD,WACC,eAACC,EAAD,WAAcS,KAAKC,MAAMF,GAAzB,OACA,cAACX,EAAD,CAAWC,MAAOU,QC1CfG,EAASrE,YAAOD,EAAPC,CAAH,mFAMNsE,GAAgBtE,IAAOW,IAAV,4LAiBb4D,IF3BsB7B,EE2BmC,QF3BtBC,EE2B+B,GF1BlE6B,aAAaC,QAAQ/B,GAX3B,SAAiBA,GAChB,IAAMgC,EAAsBF,aAAaC,QAAQ/B,GAEjD,OADgBiC,KAAKC,MAAMF,GAYnBG,CAAQnC,GAFRC,GE2BT,SAASmC,GAAQC,EAA4BC,GAC5C,IAAIjD,EAAgC,KACpC,OAAQiD,EAAO3B,MACd,IAAK,MACJtB,EAAK,sBACDgD,GADC,CAEJ,CAAE7D,MAAO8D,EAAOC,QAAQ/D,MAAOH,QAAQ,EAAOI,GAAIgC,SAEnD,MAED,IAAK,SACJpB,EAAQgD,EAAMG,QAAO,SAACC,GAAD,OAAUA,EAAKhE,KAAO6D,EAAOC,WAClD,MAED,IAAK,WACJlD,EAAQgD,EAAMK,KAAI,SAAClC,GAClB,OAAOA,EAAK/B,KAAO6D,EAAOC,QAAnB,2BACC/B,GADD,IACOnC,QAASmC,EAAKnC,SACzBmC,KAEJ,MAED,IAAK,OACJnB,EAAQgD,EAAMK,KAAI,SAAClC,GAClB,OAAOA,EAAK/B,KAAO6D,EAAOC,QAAQ9D,GAA3B,2BACC+B,GADD,IACOhC,MAAO8D,EAAOC,QAAQI,UACjCnC,KAEJ,MAED,IAAK,QACJnB,EAAQgD,EAAMG,QAAO,SAAChC,GACrB,OAAQA,EAAKnC,UAEd,MAED,QACC,MAAM,IAAIuE,MAGZ,OFzED,SAA+BZ,EAAYhC,GAC1C8B,aAAae,QAAQ7C,EAAKiC,KAAKa,UAAUd,IEuEzCe,CAAiC1D,EAAO,SACjCA,EAGR,IAoDe2D,GApDH,WAAO,IAAD,EACSC,qBAAWb,GAASP,IAD7B,mBACVV,EADU,KACH+B,EADG,KAOXxE,EAAe,SAACD,GACrByE,EAAS,CAAEvC,KAAM,SAAU4B,QAAS9D,KAG/BE,EAAW,SAACF,GACjByE,EAAS,CAAEvC,KAAM,WAAY4B,QAAS9D,KAGjC0E,EAAW,SAAC1E,EAAYkE,GAC7BO,EAAS,CAAEvC,KAAM,OAAQ4B,QAAS,CAAE9D,KAAIkE,cAOnCS,EAAiBjC,EAAMuB,KAAI,SAAClC,GACjC,OACC,cAAC,EAAD,CAEChC,MAAOgC,EAAKhC,MACZC,GAAI+B,EAAK/B,GACTJ,OAAQmC,EAAKnC,OACbK,aAAcA,EACdC,SAAUA,EACVC,KAAMuE,GAND3C,EAAK/B,OAWb,OACC,eAAC,IAAD,CAAehB,MAAOnB,EAAtB,UACC,cAACsB,EAAD,uBACA,cAAC,EAAD,CAAUsC,QArCU,SAACM,GACtB0C,EAAS,CAAEvC,KAAM,MAAO4B,QAAS/B,OAqChC,cAAC,EAAD,CAAaW,MAAOA,IACpB,eAACS,GAAD,WACEwB,EACD,cAACzB,EAAD,CAAQlC,QAzBiB,WAC3ByD,EAAS,CAAEvC,KAAM,WAwBuBnD,WAAS,EAA/C,0BCzHJ6F,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,GAAD,MAEDC,SAASC,eAAe,W","file":"static/js/main.e7ce0a31.chunk.js","sourcesContent":["import { DefaultTheme, keyframes } from 'styled-components';\n\nconst darkTheme: DefaultTheme = {\n\tborderRadius: '10px',\n\t// material UI dark color pallate\n\n\tfontSize: {\n\t\tsmall: '10px',\n\t\tmedium: '15px',\n\t\tlarge: '20px',\n\t},\n\n\tanimations: {\n\t\tfadeIn: keyframes`\n\t\t\tfrom{\n\t\t\t\topacity: 0%;\n\t\t\t\ttransform: scale(0.2) ;\n\t\t\t}\n\t\t\tto{\n\t\t\t\topacity: 100%;\n\t\t\t\ttransform: scale(1); \n\t\t\t}\n\t\t`,\n\t},\n\n\tcolors: {\n\t\tlightAccent: '#88b0b6',\n\t\tlight: '#f5f6f6',\n\t\tprimary: '#ea8f2d',\n\t\tdarkAccent: '#ae6043',\n\t\tdark: '#324355',\n\t},\n};\n\nexport { darkTheme };\n","import styled from 'styled-components';\ninterface ButtonProps {\n\tisPrimary?: boolean;\n}\n\nconst Button = styled.button<ButtonProps>`\n\tbackground-color: ${({ isPrimary, theme }) =>\n\t\tisPrimary ? theme.colors.primary : theme.colors.light};\n\tcolor: ${({ isPrimary, theme }) =>\n\t\tisPrimary ? theme.colors.light : theme.colors.primary};\n\n\twidth: 120px;\n\toutline: none;\n\tborder: none;\n\tcursor: pointer;\n\tfont-size: ${({ theme }) => theme.fontSize.medium};\n`;\n\nexport const Form = styled.form`\n\twidth: 100vw;\n\theight: 30px;\n\tjustify-content: center;\n`;\n\nexport const Title = styled.h1`\n\tcolor: ${({ theme }) => theme.colors.primary};\n\ttext-align: center;\n`;\n\nexport const Input = styled.input`\n\twidth: 40%;\n\tmin-width: 300px;\n\tmin-height: 30px;\n\toutline: none;\n\tborder: ${({ theme }) => theme.colors.primary} 2px solid;\n`;\n\nexport default Button;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/StyledTask';\nimport { TaskInterface } from '../common/interfaces';\n\ninterface TaskProps extends TaskInterface {\n\thandleDelete(id: string): void;\n\tcomplete(id: string): void;\n\tedit(id: string, newName: string): void;\n}\n\ninterface StyledTaskProps {\n\tisComplete: boolean;\n}\n\nconst StyledTask = styled.div<StyledTaskProps>`\n\tborder: 3px solid ${({ theme }) => theme.colors.lightAccent};\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\twidth: 70%;\n\tmax-width: 800px;\n\tmin-width: 400px;\n\tmargin-top: 10px;\n\tcolor: ${({ theme }) => theme.colors.dark};\n\ttext-decoration: ${({ isComplete }) =>\n\t\tisComplete ? 'line-through' : 'none'};\n\tanimation: 2s linear ${({ theme }) => theme.animations.fadeIn};\n\theight: 60px;\n`;\n\ninterface TaskTitleProps {\n\tisDone: boolean;\n}\n\nconst TaskTitle = styled.p<TaskTitleProps>`\n\tfont-size: ${({ theme }) => theme.fontSize.large};\n\tcursor: ${({ isDone }) => (isDone ? 'default' : 'pointer')};\n`;\n\nconst ButtonWrap = styled.div`\n\twidth: 30%;\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`;\n\nconst Input = styled.input`\n\tfont-size: ${({ theme }) => theme.fontSize.large};\n\tborder: none;\n\twidth: 50%;\n\tborder-bottom: solid 2px ${({ theme }) => theme.colors.dark};\n\tcolor: ${({ theme }) => theme.colors.dark};\n\toutline: none;\n\tmargin-left: 10px;\n`;\n\nfunction Task({\n\ttitle,\n\tid,\n\tisDone,\n\thandleDelete,\n\tcomplete,\n\tedit,\n}: TaskProps): JSX.Element {\n\tconst [editMode, setEditMode] = useState(false);\n\tconst [newTitle, setNewTitle] = useState(title);\n\n\tconst toggleEdit = (): void => {\n\t\tif (!isDone) {\n\t\t\tsetEditMode((prevState) => !prevState);\n\t\t}\n\t};\n\n\tconst deleteTodo = (): void => {\n\t\thandleDelete(id);\n\t};\n\n\tconst completeTodo = (): void => {\n\t\tcomplete(id);\n\t};\n\n\tconst saveTodo = (): void => {\n\t\tedit(id, newTitle);\n\t\ttoggleEdit();\n\t};\n\n\treturn (\n\t\t<StyledTask isComplete={isDone}>\n\t\t\t{!editMode ? (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<TaskTitle isDone={isDone} onClick={toggleEdit}>\n\t\t\t\t\t\tTask: {title}\n\t\t\t\t\t</TaskTitle>\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button onClick={completeTodo}>{isDone ? 'Undo' : 'Finish'}</Button>\n\t\t\t\t\t\t<Button onClick={deleteTodo}>Delete</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t</React.Fragment>\n\t\t\t) : (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={newTitle}\n\t\t\t\t\t\tonChange={(e) => setNewTitle(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button onClick={saveTodo}>Save</Button>\n\t\t\t\t\t\t<Button onClick={toggleEdit}>Cancel</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</StyledTask>\n\t);\n}\n\nexport default Task;\n","import { useState } from 'react';\nimport Button, { Form, Input } from '../common/StyledTask';\nimport uniqid from 'uniqid';\nimport { TaskInterface } from '../common/interfaces';\nimport styled from 'styled-components';\n\ninterface StyledFormProps {\n\tisOpen: boolean;\n}\n\nconst FormButton = styled(Button)`\n\tdisplay: block;\n\tmargin: auto;\n\twidth: 150px;\n\tpadding: 5px;\n\tmargin-top: 10px;\n`;\n\nconst StyledTaskForm = styled(Form)<StyledFormProps>`\n\tdisplay: ${(props) => (props.isOpen ? 'flex' : 'none')};\n\tflex-direction: column;\n\tjustify-content: flex-start;\n\talign-items: center;\n\tmargin: auto;\n\twidth: 50%;\n\tmax-width: 500px;\n\theight: 500px;\n\tbackground-color: ${({ theme }) => theme.colors.light};\n\tz-index: 4;\n\tborder: 3px solid ${({ theme }) => theme.colors.dark};\n\tposition: absolute;\n\tleft: 50%;\n\ttransform: translate(-50%, 0);\n`;\n\nconst ButtonWrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-around;\n\twidth: 70%;\n\theight: 40px;\n\tmargin-top: 350px;\n`;\n\ninterface TaskFormProps {\n\taddTask(task: TaskInterface): void;\n}\n\nfunction TaskForm({ addTask }: TaskFormProps) {\n\tconst [taskName, setTaskName] = useState<string>('');\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n\t\te.preventDefault();\n\t\tsetTaskName(e.target.value);\n\t};\n\n\tconst handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault();\n\t\tsetIsOpen(false);\n\t\tconst task: TaskInterface = {\n\t\t\ttitle: taskName,\n\t\t\tisDone: false,\n\t\t\tid: uniqid(),\n\t\t};\n\t\taddTask(task);\n\t\tsetTaskName('');\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<StyledTaskForm isOpen={isOpen} onSubmit={handleSubmit}>\n\t\t\t\t<h3>Task Form</h3>\n\t\t\t\t<Input\n\t\t\t\t\trequired={true}\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={taskName}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tplaceholder='Task Name'\n\t\t\t\t/>\n\t\t\t\t<ButtonWrapper>\n\t\t\t\t\t<Button type='submit' isPrimary>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button type='button' isPrimary onClick={() => setIsOpen(false)}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</Button>\n\t\t\t\t</ButtonWrapper>\n\t\t\t</StyledTaskForm>\n\t\t\t<FormButton\n\t\t\t\ttype='button'\n\t\t\t\tonClick={() => setIsOpen((prevState) => !prevState)}\n\t\t\t\tisPrimary>\n\t\t\t\tAdd Task\n\t\t\t</FormButton>\n\t\t</div>\n\t);\n}\n\nexport default TaskForm;\n","function getData(key: string) {\n\tconst data: string | null = localStorage.getItem(key);\n\tconst objects = JSON.parse(data!);\n\treturn objects;\n}\n\nfunction populateStorage<Type>(data: Type, key: string) {\n\tlocalStorage.setItem(key, JSON.stringify(data));\n}\n\nfunction checkStorage<Type>(key: string, defaultValue: Type) {\n\tif (!localStorage.getItem(key)) {\n\t\treturn defaultValue;\n\t} else {\n\t\treturn getData(key);\n\t}\n}\n\nexport { populateStorage, checkStorage };\n","import styled from 'styled-components';\nimport { TaskInterface } from '../common/interfaces';\n\ninterface StyledBarProps {\n\twidth: number;\n}\n\nconst StyledBar = styled.div<StyledBarProps>`\n\twidth: ${({ width }) => width}%;\n\theight: 100%;\n\tbackground-color: ${({ theme }) => theme.colors.primary};\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\talign-items: center;\n\tposition: absolute;\n\ttransition: width 1s ease;\n`;\n\nconst BarWrap = styled.div`\n\twidth: 80%;\n\tmax-width: 900px;\n\theight: 30px;\n\tdisplay: block;\n\tmargin: auto;\n\tmargin-top: 30px;\n\tmargin-bottom: 30px;\n\tborder: 2px solid ${({ theme }) => theme.colors.dark};\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n\nconst CompleteNum = styled.span`\n\tcolor: ${({ theme }) => theme.colors.light};\n\tposition: absolute;\n\tz-index: 2;\n`;\n\ninterface ProgressBarProps {\n\ttasks: TaskInterface[];\n}\n\nconst ProgressBar = ({ tasks }: ProgressBarProps) => {\n\tlet completed = 0;\n\tlet total = tasks.length;\n\ttasks.forEach((task) => {\n\t\tif (task.isDone) {\n\t\t\tcompleted += 1;\n\t\t}\n\t});\n\tlet percent = total ? (completed / total) * 100 : 100;\n\n\treturn (\n\t\t<BarWrap>\n\t\t\t<CompleteNum>{Math.floor(percent)}%</CompleteNum>\n\t\t\t<StyledBar width={percent}></StyledBar>\n\t\t</BarWrap>\n\t);\n};\n\nexport default ProgressBar;\n","import React, { useReducer } from 'react';\nimport uniqid from 'uniqid';\n\nimport styled, { ThemeProvider } from 'styled-components';\nimport { darkTheme } from './theme';\nimport Button, { Title } from './common/StyledTask';\n\nimport Task from './components/Task';\nimport { checkStorage, populateStorage } from './helper/localStorageLogic';\nimport { TaskInterface } from './common/interfaces';\n\nimport TaskForm from './components/TaskForm';\nimport ProgressBar from './components/ProgressBar';\n\nconst BigBtn = styled(Button)`\n\twidth: 150px;\n\tpadding: 5px;\n\tmargin-top: 10px;\n`;\n\nconst TaskConteiner = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tflex-wrap: nowrap;\n\tjustify-content: center;\n\theight: max-content;\n\twidth: 100vw;\n`;\n\ntype ACTIONTYPE =\n\t| { type: 'add'; payload: TaskInterface }\n\t| { type: 'edit'; payload: { id: string; newName: string } }\n\t| { type: 'delete'; payload: string }\n\t| { type: 'complete'; payload: string }\n\t| { type: 'clear' };\n\nconst initialValue: TaskInterface[] | [] = checkStorage<any[]>('tasks', []);\n\nfunction reducer(state: typeof initialValue, action: ACTIONTYPE) {\n\tlet value: TaskInterface[] | null = null;\n\tswitch (action.type) {\n\t\tcase 'add':\n\t\t\tvalue = [\n\t\t\t\t...state,\n\t\t\t\t{ title: action.payload.title, isDone: false, id: uniqid() },\n\t\t\t];\n\t\t\tbreak;\n\n\t\tcase 'delete':\n\t\t\tvalue = state.filter((todo) => todo.id !== action.payload);\n\t\t\tbreak;\n\n\t\tcase 'complete':\n\t\t\tvalue = state.map((task: TaskInterface) => {\n\t\t\t\treturn task.id === action.payload\n\t\t\t\t\t? { ...task, isDone: !task.isDone }\n\t\t\t\t\t: task;\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'edit':\n\t\t\tvalue = state.map((task: TaskInterface) => {\n\t\t\t\treturn task.id === action.payload.id\n\t\t\t\t\t? { ...task, title: action.payload.newName }\n\t\t\t\t\t: task;\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'clear':\n\t\t\tvalue = state.filter((task: TaskInterface) => {\n\t\t\t\treturn !task.isDone;\n\t\t\t});\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error();\n\t}\n\tpopulateStorage<TaskInterface[]>(value, 'tasks');\n\treturn value;\n}\n\nconst App = () => {\n\tconst [tasks, dispatch] = useReducer(reducer, initialValue);\n\n\tconst handleAddTask = (task: TaskInterface) => {\n\t\tdispatch({ type: 'add', payload: task });\n\t};\n\n\tconst handleDelete = (id: string): void => {\n\t\tdispatch({ type: 'delete', payload: id });\n\t};\n\n\tconst complete = (id: string): void => {\n\t\tdispatch({ type: 'complete', payload: id });\n\t};\n\n\tconst editTask = (id: string, newName: string): void => {\n\t\tdispatch({ type: 'edit', payload: { id, newName } });\n\t};\n\n\tconst clearCompletedTasks = (): void => {\n\t\tdispatch({ type: 'clear' });\n\t};\n\n\tconst todoComponents = tasks.map((task: TaskInterface) => {\n\t\treturn (\n\t\t\t<Task\n\t\t\t\tkey={task.id}\n\t\t\t\ttitle={task.title}\n\t\t\t\tid={task.id}\n\t\t\t\tisDone={task.isDone}\n\t\t\t\thandleDelete={handleDelete}\n\t\t\t\tcomplete={complete}\n\t\t\t\tedit={editTask}\n\t\t\t/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t<Title>Task App</Title>\n\t\t\t<TaskForm addTask={handleAddTask} />\n\t\t\t<ProgressBar tasks={tasks} />\n\t\t\t<TaskConteiner>\n\t\t\t\t{todoComponents}\n\t\t\t\t<BigBtn onClick={clearCompletedTasks} isPrimary>\n\t\t\t\t\tClear\n\t\t\t\t</BigBtn>\n\t\t\t</TaskConteiner>\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}